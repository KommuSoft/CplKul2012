Although C++ and Lua are both "portable" languages, it is still easier to port Lua to another system. Why is that, how is the design of the language influenced by that.
	Lua: There are a couple of reasons for this. First, Lua must be portable. Like I said before Lua was designed to be used by a lot of different people. This means that a lot of different systems can be used. So Lua wa designed with portability in mind. Another point is that Lua was (and is) designed to be a small language. The designers say it's easier to add a feature than removing an excessive one. Also they aren't afraid to break backwards compatibility. This results in a small language. For example: the reference manual is less than 100 pages. How big is the C++ reference.

	C++: More than 1300 pages. But C++ can't permit to break backwards compatibility. The language is used very intensively. Also Lua users can download the interpreter and support it themselves, something that is much much more difficult to do with C++. The reason why C++ isn't that portable in real life, is that compiler writers and library designers create stuff that is useful but not portable. For example the following code isn't valid C++
		int main(){
			unsigned long size = 5;
			int arr[size];
		}
Although some compilers accept it and make a C++ extension of it.

	Python: That's why Python has a "batteries included" philosophy. A lot of functionality is implemented in the Python standard, so less libraries are needed and better portability is achieved. Also good for portability is a small group of designers. This ensures that the global is consistent through the whole language. [TODO: goed argument?]
	
Source: The evolution of Lua; N3290
